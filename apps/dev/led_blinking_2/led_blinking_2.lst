
led_blinking_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000894  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000077e  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_copy_data>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	ea e4       	ldi	r30, 0x4A	; 74
  26:	f1 e0       	ldi	r31, 0x01	; 1
  28:	03 c0       	rjmp	.+6      	; 0x30 <.do_copy_data_start>

0000002a <.do_copy_data_loop>:
  2a:	c8 95       	lpm
  2c:	31 96       	adiw	r30, 0x01	; 1
  2e:	0d 92       	st	X+, r0

00000030 <.do_copy_data_start>:
  30:	a0 36       	cpi	r26, 0x60	; 96
  32:	b1 07       	cpc	r27, r17
  34:	d1 f7       	brne	.-12     	; 0x2a <.do_copy_data_loop>

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a0 36       	cpi	r26, 0x60	; 96
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <__SP_H__>
  46:	62 d0       	rcall	.+196    	; 0x10c <main>
  48:	7f c0       	rjmp	.+254    	; 0x148 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__heap_end>

0000004c <delay_ms>:
 * Wykonuje opoznienie w milisekundach
 *
 * @param unsigned int i_Miliseconds 
 */
void delay_ms(unsigned int i_Miliseconds)
{
  4c:	28 2f       	mov	r18, r24
  4e:	39 2f       	mov	r19, r25
  50:	06 c0       	rjmp	.+12     	; 0x5e <delay_ms+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  52:	80 e8       	ldi	r24, 0x80	; 128
  54:	97 e0       	ldi	r25, 0x07	; 7
  56:	01 97       	sbiw	r24, 0x01	; 1
  58:	f1 f7       	brne	.-4      	; 0x56 <delay_ms+0xa>
        // accurate and not so much compiler dependent
        // as self made code.
        while(i_Miliseconds)
        {
                _delay_ms(0.96);
                i_Miliseconds--;
  5a:	21 50       	subi	r18, 0x01	; 1
  5c:	30 40       	sbci	r19, 0x00	; 0
void delay_ms(unsigned int i_Miliseconds)
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(i_Miliseconds)
  5e:	21 15       	cp	r18, r1
  60:	31 05       	cpc	r19, r1
  62:	b9 f7       	brne	.-18     	; 0x52 <delay_ms+0x6>
  64:	08 95       	ret

00000066 <ioinit>:


if(bit_is_clear(PIND, PD0)) {   }

// LUB  TAK 

  66:	c3 9a       	sbi	0x18, 3	; 24
if(!(PIND & _BV(PD0)))    {  }
*/

  68:	c1 9a       	sbi	0x18, 1	; 24
  6a:	08 95       	ret

0000006c <mixing_blinking>:
// inicjalizacja wyjscia
#define OUTPUT_INIT(PORT_LETTER, PIN_NUMBER)			                \
    PORT ## PORT_LETTER  |= _BV(PIN ## PORT_LETTER ## PIN_NUMBER)

  6c:	8f 92       	push	r8
  6e:	9f 92       	push	r9
  70:	af 92       	push	r10
  72:	bf 92       	push	r11
  74:	cf 92       	push	r12
  76:	df 92       	push	r13
  78:	ef 92       	push	r14
  7a:	ff 92       	push	r15
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	b8 2e       	mov	r11, r24
  86:	86 2e       	mov	r8, r22
  88:	ff 24       	eor	r15, r15
  8a:	cc 24       	eor	r12, r12
  8c:	dd 24       	eor	r13, r13


#define OUTPUT                "OUTPUT"
#define INPPUT                "INPPUT"

#define LED_RED              OUTPUT
  8e:	98 2e       	mov	r9, r24
  90:	93 94       	inc	r9
  92:	2c c0       	rjmp	.+88     	; 0xec <__stack+0xd>
// ustawienie stany niskiego na okreslonym pinie na okrelsonym porcie
#define OUTPUT_SET_0(PORT_LETTER, PIN_NUMBER)			                \
    PORT ## PORT_LETTER &= ~_BV(PIN ## PORT_LETTER ## PIN_NUMBER)

/*

  94:	f3 94       	inc	r15
#define OUT_PORT__LED_RED    "B"
  96:	c3 98       	cbi	0x18, 3	; 24
#define OUT__LED_RED          3
#define OUT_PORT__BUZZER     "D"
  98:	8f 2d       	mov	r24, r15
  9a:	99 27       	eor	r25, r25
  9c:	62 e3       	ldi	r22, 0x32	; 50
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	41 d0       	rcall	.+130    	; 0x124 <__mulhi3>
  a2:	08 2f       	mov	r16, r24
  a4:	19 2f       	mov	r17, r25
  a6:	d2 df       	rcall	.-92     	; 0x4c <delay_ms>
#define OUT__BUZZER           1

  a8:	c3 9a       	sbi	0x18, 3	; 24

#define OUTPUT                "OUTPUT"
  aa:	91 2f       	mov	r25, r17
  ac:	80 2f       	mov	r24, r16
  ae:	ce df       	rcall	.-100    	; 0x4c <delay_ms>
  b0:	21 96       	adiw	r28, 0x01	; 1
    PORT ## PORT_LETTER  |= _BV(PIN ## PORT_LETTER ## PIN_NUMBER)

// ustawienie stany niskiego na okreslonym pinie na okrelsonym porcie
#define OUTPUT_SET_0(PORT_LETTER, PIN_NUMBER)			                \
    PORT ## PORT_LETTER &= ~_BV(PIN ## PORT_LETTER ## PIN_NUMBER)

  b2:	bc 16       	cp	r11, r28
  b4:	78 f7       	brcc	.-34     	; 0x94 <mixing_blinking+0x28>
  b6:	af 2c       	mov	r10, r15
  b8:	ee 24       	eor	r14, r14
#define OUTPUT                "OUTPUT"
#define INPPUT                "INPPUT"

#define LED_RED              OUTPUT
#define PORT__LED_RED        "B"
#define PIN___LED_RED        (3)
  ba:	fa 94       	dec	r15

  bc:	c3 98       	cbi	0x18, 3	; 24
#define CREATE_OUTPUT(TYPEOF, PORT_LETTER, PIN_NUMBER)			            \
    if ( OUTPUT == TYPEOF )                                                 \
  be:	8f 2d       	mov	r24, r15
  c0:	99 27       	eor	r25, r25
  c2:	62 e3       	ldi	r22, 0x32	; 50
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	2e d0       	rcall	.+92     	; 0x124 <__mulhi3>
  c8:	08 2f       	mov	r16, r24
  ca:	19 2f       	mov	r17, r25
  cc:	bf df       	rcall	.-130    	; 0x4c <delay_ms>
    {                                                                       \
        define PORT__##TYPEOF  PORT_LETTER                             \
  ce:	c3 9a       	sbi	0x18, 3	; 24
        define PIN__##TYPEOF  PIN_NUMBER                               \
        PORT ## (PORT__ ## TYPEOF)  |= _BV(PIN ## (PIN__ ## TYPEOF));       \
  d0:	91 2f       	mov	r25, r17
  d2:	80 2f       	mov	r24, r16
  d4:	bb df       	rcall	.-138    	; 0x4c <delay_ms>


#define OUTPUT                "OUTPUT"
#define INPPUT                "INPPUT"

#define LED_RED              OUTPUT
  d6:	e3 94       	inc	r14
  d8:	e9 14       	cp	r14, r9
  da:	79 f7       	brne	.-34     	; 0xba <mixing_blinking+0x4e>
  dc:	fa 2c       	mov	r15, r10
  de:	fb 18       	sub	r15, r11
  e0:	fa 94       	dec	r15
  e2:	08 94       	sec
  e4:	c1 1c       	adc	r12, r1
  e6:	d1 1c       	adc	r13, r1
// ustawienie stany wysokiego na okreslonym pinie na okrelsonym porcie
#define OUTPUT_SET_1(PORT_LETTER, PIN_NUMBER)			                \
    PORT ## PORT_LETTER  |= _BV(PIN ## PORT_LETTER ## PIN_NUMBER)

// ustawienie stany niskiego na okreslonym pinie na okrelsonym porcie
#define OUTPUT_SET_0(PORT_LETTER, PIN_NUMBER)			                \
  e8:	8c 14       	cp	r8, r12
  ea:	18 f0       	brcs	.+6      	; 0xf2 <__stack+0x13>
        define PORT__##TYPEOF  PORT_LETTER                             \
        define PIN__##TYPEOF  PIN_NUMBER                               \
        PORT ## (PORT__ ## TYPEOF)  |= _BV(PIN ## (PIN__ ## TYPEOF));       \
    }                                                                       \
    else if ( INPPUT == TYPEOF )                                            \
    {}
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	d1 cf       	rjmp	.-94     	; 0x94 <mixing_blinking+0x28>
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	ff 90       	pop	r15
  fc:	ef 90       	pop	r14
  fe:	df 90       	pop	r13
 100:	cf 90       	pop	r12
 102:	bf 90       	pop	r11
 104:	af 90       	pop	r10
 106:	9f 90       	pop	r9
 108:	8f 90       	pop	r8
 10a:	08 95       	ret

0000010c <main>:


#define OUT__LED_RED          3

 10c:	cf ed       	ldi	r28, 0xDF	; 223
 10e:	d0 e0       	ldi	r29, 0x00	; 0
 110:	de bf       	out	0x3e, r29	; 62
 112:	cd bf       	out	0x3d, r28	; 61


if(bit_is_clear(PIND, PD0)) {   }

// LUB  TAK 

 114:	c3 9a       	sbi	0x18, 3	; 24
if(!(PIND & _BV(PD0)))    {  }
*/

 116:	c1 9a       	sbi	0x18, 1	; 24
//using:
//    CREATE_OUTPUT(LED_RED, "B", 4);


*/

 118:	64 e6       	ldi	r22, 0x64	; 100
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	a7 df       	rcall	.-178    	; 0x6c <mixing_blinking>

#endif /* !defined(__MB_AVR_SIMPLE_BOARD__H) */
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	12 c0       	rjmp	.+36     	; 0x148 <_exit>

00000124 <__mulhi3>:
 124:	55 27       	eor	r21, r21
 126:	00 24       	eor	r0, r0

00000128 <__mulhi3_loop>:
 128:	80 ff       	sbrs	r24, 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__mulhi3_skip1>
 12c:	06 0e       	add	r0, r22
 12e:	57 1f       	adc	r21, r23

00000130 <__mulhi3_skip1>:
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	61 15       	cp	r22, r1
 136:	71 05       	cpc	r23, r1
 138:	21 f0       	breq	.+8      	; 0x142 <__mulhi3_exit>
 13a:	96 95       	lsr	r25
 13c:	87 95       	ror	r24
 13e:	00 97       	sbiw	r24, 0x00	; 0
 140:	99 f7       	brne	.-26     	; 0x128 <__mulhi3_loop>

00000142 <__mulhi3_exit>:
 142:	95 2f       	mov	r25, r21
 144:	80 2d       	mov	r24, r0
 146:	08 95       	ret

00000148 <_exit>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <_exit>
