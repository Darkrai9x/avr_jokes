
led_blinking_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000093c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000789  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_copy_data>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	e8 e8       	ldi	r30, 0x88	; 136
  26:	f1 e0       	ldi	r31, 0x01	; 1
  28:	03 c0       	rjmp	.+6      	; 0x30 <.do_copy_data_start>

0000002a <.do_copy_data_loop>:
  2a:	c8 95       	lpm
  2c:	31 96       	adiw	r30, 0x01	; 1
  2e:	0d 92       	st	X+, r0

00000030 <.do_copy_data_start>:
  30:	a0 36       	cpi	r26, 0x60	; 96
  32:	b1 07       	cpc	r27, r17
  34:	d1 f7       	brne	.-12     	; 0x2a <.do_copy_data_loop>

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a0 36       	cpi	r26, 0x60	; 96
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <__SP_H__>
  46:	66 d0       	rcall	.+204    	; 0x114 <main>
  48:	9e c0       	rjmp	.+316    	; 0x186 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__heap_end>

0000004c <delay_ms>:
 * Wykonuje opoznienie w milisekundach
 *
 * @param unsigned int i_Miliseconds 
 */
void delay_ms(unsigned int i_Miliseconds)
{
  4c:	28 2f       	mov	r18, r24
  4e:	39 2f       	mov	r19, r25
  50:	06 c0       	rjmp	.+12     	; 0x5e <delay_ms+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  52:	80 e8       	ldi	r24, 0x80	; 128
  54:	97 e0       	ldi	r25, 0x07	; 7
  56:	01 97       	sbiw	r24, 0x01	; 1
  58:	f1 f7       	brne	.-4      	; 0x56 <delay_ms+0xa>
        // accurate and not so much compiler dependent
        // as self made code.
        while(i_Miliseconds)
        {
                _delay_ms(0.96);
                i_Miliseconds--;
  5a:	21 50       	subi	r18, 0x01	; 1
  5c:	30 40       	sbci	r19, 0x00	; 0
void delay_ms(unsigned int i_Miliseconds)
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(i_Miliseconds)
  5e:	21 15       	cp	r18, r1
  60:	31 05       	cpc	r19, r1
  62:	b9 f7       	brne	.-18     	; 0x52 <delay_ms+0x6>
  64:	08 95       	ret

00000066 <ioinit>:


void ioinit (void)
{
    // RED LED
    INIT__LED_RED;
  66:	c3 9a       	sbi	0x18, 3	; 24

    // BUZZER
    INIT__BUZZER;
  68:	c1 9a       	sbi	0x18, 1	; 24

    // ncjalizuej klawisz LEFT
    INIT__KEY_LEFT;
  6a:	8c 98       	cbi	0x11, 4	; 17
  6c:	94 9a       	sbi	0x12, 4	; 18

    // ncjalizuej klawisz DOWN
    INIT__KEY_DOWN;
  6e:	8d 98       	cbi	0x11, 5	; 17
  70:	95 9a       	sbi	0x12, 5	; 18
  72:	08 95       	ret

00000074 <fast_blinking>:
}

void fast_blinking (unsigned char repeat, unsigned char repeats)
{
  74:	8f 92       	push	r8
  76:	9f 92       	push	r9
  78:	af 92       	push	r10
  7a:	bf 92       	push	r11
  7c:	cf 92       	push	r12
  7e:	df 92       	push	r13
  80:	ef 92       	push	r14
  82:	ff 92       	push	r15
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	b8 2e       	mov	r11, r24
  8e:	86 2e       	mov	r8, r22
  90:	ff 24       	eor	r15, r15
  92:	cc 24       	eor	r12, r12
  94:	dd 24       	eor	r13, r13
            SET__LED_RED(1);

            delay_ms(delay * d);
        }

        for ( n = 0; n <= repeat; n++ )
  96:	98 2e       	mov	r9, r24
  98:	93 94       	inc	r9
  9a:	2c c0       	rjmp	.+88     	; 0xf4 <__stack+0x15>

    for ( n1 = 0; n1 <= repeats; n1++ )
    {
        for ( n = 0; n <= repeat; n++ )
        {
            d++;
  9c:	f3 94       	inc	r15
            SET__LED_RED(0);
  9e:	c3 98       	cbi	0x18, 3	; 24

            delay_ms(delay * d);
  a0:	8f 2d       	mov	r24, r15
  a2:	99 27       	eor	r25, r25
  a4:	62 e3       	ldi	r22, 0x32	; 50
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	5c d0       	rcall	.+184    	; 0x162 <__mulhi3>
  aa:	08 2f       	mov	r16, r24
  ac:	19 2f       	mov	r17, r25
  ae:	ce df       	rcall	.-100    	; 0x4c <delay_ms>

            SET__LED_RED(1);
  b0:	c3 9a       	sbi	0x18, 3	; 24

            delay_ms(delay * d);
  b2:	91 2f       	mov	r25, r17
  b4:	80 2f       	mov	r24, r16
  b6:	ca df       	rcall	.-108    	; 0x4c <delay_ms>
  b8:	21 96       	adiw	r28, 0x01	; 1
    unsigned char n1 = 0;
    unsigned char d = 0;

    for ( n1 = 0; n1 <= repeats; n1++ )
    {
        for ( n = 0; n <= repeat; n++ )
  ba:	bc 16       	cp	r11, r28
  bc:	78 f7       	brcc	.-34     	; 0x9c <fast_blinking+0x28>
  be:	af 2c       	mov	r10, r15
  c0:	ee 24       	eor	r14, r14
            delay_ms(delay * d);
        }

        for ( n = 0; n <= repeat; n++ )
        {
            d--;
  c2:	fa 94       	dec	r15
            SET__LED_RED(0);
  c4:	c3 98       	cbi	0x18, 3	; 24

            delay_ms(delay * d);
  c6:	8f 2d       	mov	r24, r15
  c8:	99 27       	eor	r25, r25
  ca:	62 e3       	ldi	r22, 0x32	; 50
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	49 d0       	rcall	.+146    	; 0x162 <__mulhi3>
  d0:	08 2f       	mov	r16, r24
  d2:	19 2f       	mov	r17, r25
  d4:	bb df       	rcall	.-138    	; 0x4c <delay_ms>

            SET__LED_RED(1);
  d6:	c3 9a       	sbi	0x18, 3	; 24

            delay_ms(delay * d);
  d8:	91 2f       	mov	r25, r17
  da:	80 2f       	mov	r24, r16
  dc:	b7 df       	rcall	.-146    	; 0x4c <delay_ms>
            SET__LED_RED(1);

            delay_ms(delay * d);
        }

        for ( n = 0; n <= repeat; n++ )
  de:	e3 94       	inc	r14
  e0:	e9 14       	cp	r14, r9
  e2:	79 f7       	brne	.-34     	; 0xc2 <fast_blinking+0x4e>
  e4:	fa 2c       	mov	r15, r10
  e6:	fb 18       	sub	r15, r11
  e8:	fa 94       	dec	r15
  ea:	08 94       	sec
  ec:	c1 1c       	adc	r12, r1
  ee:	d1 1c       	adc	r13, r1
    unsigned int delay = 50;
    unsigned char n = 0;
    unsigned char n1 = 0;
    unsigned char d = 0;

    for ( n1 = 0; n1 <= repeats; n1++ )
  f0:	8c 14       	cp	r8, r12
  f2:	18 f0       	brcs	.+6      	; 0xfa <__stack+0x1b>
            SET__LED_RED(1);

            delay_ms(delay * d);
        }
    }
}
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	d1 cf       	rjmp	.-94     	; 0x9c <fast_blinking+0x28>
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	df 90       	pop	r13
 108:	cf 90       	pop	r12
 10a:	bf 90       	pop	r11
 10c:	af 90       	pop	r10
 10e:	9f 90       	pop	r9
 110:	8f 90       	pop	r8
 112:	08 95       	ret

00000114 <main>:


int main (void)
{
 114:	cf ed       	ldi	r28, 0xDF	; 223
 116:	d0 e0       	ldi	r29, 0x00	; 0
 118:	de bf       	out	0x3e, r29	; 62
 11a:	cd bf       	out	0x3d, r28	; 61
    unsigned char key;
    unsigned int delay = 500;
    unsigned int step  = 100;

    ioinit ();
 11c:	a4 df       	rcall	.-184    	; 0x66 <ioinit>
 11e:	c4 ef       	ldi	r28, 0xF4	; 244
 120:	d1 e0       	ldi	r29, 0x01	; 1
//    fast_blinking(7, 100);

    for (;;)
    {
//        if ( CHECK__KEY_LEFT )
        if ( bit_is_clear(PIND, PD4) )
 122:	84 99       	sbic	0x10, 4	; 16
 124:	09 c0       	rjmp	.+18     	; 0x138 <main+0x24>
        {
            if ( (step * 100) < delay )
 126:	87 e2       	ldi	r24, 0x27	; 39
 128:	c1 31       	cpi	r28, 0x11	; 17
 12a:	d8 07       	cpc	r29, r24
 12c:	18 f4       	brcc	.+6      	; 0x134 <main+0x20>
 12e:	c0 e1       	ldi	r28, 0x10	; 16
 130:	d7 e2       	ldi	r29, 0x27	; 39
 132:	02 c0       	rjmp	.+4      	; 0x138 <main+0x24>
            {
                delay += step;
 134:	cc 59       	subi	r28, 0x9C	; 156
 136:	df 4f       	sbci	r29, 0xFF	; 255
                delay = step * 100;
            }
        }
        
//        if ( CHECK__KEY_DOWN ) 
        if ( bit_is_clear(PIND, PD5) )
 138:	85 99       	sbic	0x10, 5	; 16
 13a:	08 c0       	rjmp	.+16     	; 0x14c <main+0x38>
        {
            if ( (step * 2) < delay )
 13c:	c9 3c       	cpi	r28, 0xC9	; 201
 13e:	d1 05       	cpc	r29, r1
 140:	18 f4       	brcc	.+6      	; 0x148 <main+0x34>
 142:	c4 e6       	ldi	r28, 0x64	; 100
 144:	d0 e0       	ldi	r29, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <main+0x38>
            {
                delay -= step;
 148:	c4 56       	subi	r28, 0x64	; 100
 14a:	d0 40       	sbci	r29, 0x00	; 0
            }
        }


        // led on, pin=0
        SET__LED_RED(1);
 14c:	c3 9a       	sbi	0x18, 3	; 24

        // buzzer off
        SET__BUZZER(0);
 14e:	c1 98       	cbi	0x18, 1	; 24

        delay_ms(delay);
 150:	8c 2f       	mov	r24, r28
 152:	9d 2f       	mov	r25, r29
 154:	7b df       	rcall	.-266    	; 0x4c <delay_ms>

        // led off, pin=1
        SET__LED_RED(0);
 156:	c3 98       	cbi	0x18, 3	; 24

        // buzzer on
        SET__BUZZER(1);
 158:	c1 9a       	sbi	0x18, 1	; 24

        delay_ms(delay);
 15a:	8c 2f       	mov	r24, r28
 15c:	9d 2f       	mov	r25, r29
 15e:	76 df       	rcall	.-276    	; 0x4c <delay_ms>
 160:	e0 cf       	rjmp	.-64     	; 0x122 <main+0xe>

00000162 <__mulhi3>:
 162:	55 27       	eor	r21, r21
 164:	00 24       	eor	r0, r0

00000166 <__mulhi3_loop>:
 166:	80 ff       	sbrs	r24, 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <__mulhi3_skip1>
 16a:	06 0e       	add	r0, r22
 16c:	57 1f       	adc	r21, r23

0000016e <__mulhi3_skip1>:
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	61 15       	cp	r22, r1
 174:	71 05       	cpc	r23, r1
 176:	21 f0       	breq	.+8      	; 0x180 <__mulhi3_exit>
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	99 f7       	brne	.-26     	; 0x166 <__mulhi3_loop>

00000180 <__mulhi3_exit>:
 180:	95 2f       	mov	r25, r21
 182:	80 2d       	mov	r24, r0
 184:	08 95       	ret

00000186 <_exit>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <_exit>
