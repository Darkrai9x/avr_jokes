
serial_exmpl_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  0000014e  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008000a4  00000192  00000206  2**0
                  ALLOC
  3 .stab         000008ac  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000838  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__vector_7>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	30 c0       	rjmp	.+96     	; 0x74 <__vector_9>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_copy_data>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	ee e4       	ldi	r30, 0x4E	; 78
  26:	f1 e0       	ldi	r31, 0x01	; 1
  28:	03 c0       	rjmp	.+6      	; 0x30 <.do_copy_data_start>

0000002a <.do_copy_data_loop>:
  2a:	c8 95       	lpm
  2c:	31 96       	adiw	r30, 0x01	; 1
  2e:	0d 92       	st	X+, r0

00000030 <.do_copy_data_start>:
  30:	a4 3a       	cpi	r26, 0xA4	; 164
  32:	b1 07       	cpc	r27, r17
  34:	d1 f7       	brne	.-12     	; 0x2a <.do_copy_data_loop>

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a4 ea       	ldi	r26, 0xA4	; 164
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	aa 3b       	cpi	r26, 0xBA	; 186
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <__SP_H__>
  46:	54 d0       	rcall	.+168    	; 0xf0 <main>
  48:	81 c0       	rjmp	.+258    	; 0x14c <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__heap_end>

0000004c <__vector_7>:
char dane2[]="\n\rwcisnales: 2\n\r";
char dane3[]="\n\rwcisnij klawisz 1 lub 2 ...\n\r";

/////   procedura obslugi odbiornika UART   /////
SIGNAL(SIG_UART_RECV)
{
  4c:	1f 92       	push	r1
  4e:	0f 92       	push	r0
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	0f 92       	push	r0
  54:	11 24       	eor	r1, r1
  56:	8f 93       	push	r24
   cli();
  58:	f8 94       	cli
   komenda = UDR;  //odebrane zapamietuje w zmiennej komenda
  5a:	8c b1       	in	r24, 0x0c	; 12
  5c:	80 93 a5 00 	sts	0x00A5, r24
   flagrx  = 1;    //ustawia flage odebrania znaku
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	80 93 a4 00 	sts	0x00A4, r24
   sei();
  66:	78 94       	sei
  68:	8f 91       	pop	r24
  6a:	0f 90       	pop	r0
  6c:	0f be       	out	0x3f, r0	; 63
  6e:	0f 90       	pop	r0
  70:	1f 90       	pop	r1
  72:	18 95       	reti

00000074 <__vector_9>:
}

/////   procedura obslugi nadajnika UART   /////
SIGNAL(SIG_UART_TRANS)
{   
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
  82:	ef 93       	push	r30
  84:	ff 93       	push	r31
   if ( bufor[m] != '\0' )
  86:	80 91 60 00 	lds	r24, 0x0060
  8a:	90 91 61 00 	lds	r25, 0x0061
  8e:	f9 2f       	mov	r31, r25
  90:	e8 2f       	mov	r30, r24
  92:	ea 55       	subi	r30, 0x5A	; 90
  94:	ff 4f       	sbci	r31, 0xFF	; 255
  96:	e0 81       	ld	r30, Z
  98:	ee 23       	and	r30, r30
  9a:	19 f0       	breq	.+6      	; 0xa2 <__vector_9+0x2e>
   {
      UDR=bufor[m];
  9c:	ec b9       	out	0x0c, r30	; 12
      m++;
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <__vector_9+0x34>
   }
   else if ( bufor[m] == '\0' )
   {
      //   UDR='\0';   //wysyla jeszcze znak konca'\0' i wylacza nad
      //do poprawki   
      UCR &= ~_BV(TXEN);   //zeruje bitTXEN wylacza nadajnik   
  a2:	53 98       	cbi	0x0a, 3	; 10
      m   = 1;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	90 93 61 00 	sts	0x0061, r25
  ac:	80 93 60 00 	sts	0x0060, r24
  b0:	ff 91       	pop	r31
  b2:	ef 91       	pop	r30
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <wyslij>:
   }
}

/////   funkcja kopiujaca tablice dane do bufora i inicjujaca wysylanie      ////
void wyslij(char dane[])
{
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	03 c0       	rjmp	.+6      	; 0xce <wyslij+0xc>
   short int n;

   for(n=0;dane[n]!='\0';n++)   //kopiuje dane[] do bufora[]
      bufor[n]=dane[n];
  c8:	ec 93       	st	X, r30
/////   funkcja kopiujaca tablice dane do bufora i inicjujaca wysylanie      ////
void wyslij(char dane[])
{
   short int n;

   for(n=0;dane[n]!='\0';n++)   //kopiuje dane[] do bufora[]
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	f9 2f       	mov	r31, r25
  d0:	e8 2f       	mov	r30, r24
  d2:	e2 0f       	add	r30, r18
  d4:	f3 1f       	adc	r31, r19
  d6:	e0 81       	ld	r30, Z
  d8:	b3 2f       	mov	r27, r19
  da:	a2 2f       	mov	r26, r18
  dc:	aa 55       	subi	r26, 0x5A	; 90
  de:	bf 4f       	sbci	r27, 0xFF	; 255
  e0:	ee 23       	and	r30, r30
  e2:	91 f7       	brne	.-28     	; 0xc8 <wyslij+0x6>
      bufor[n]=dane[n];

   bufor[n] = dane[n];      //dodaje na koniec bufora '\0'
  e4:	1c 92       	st	X, r1
   UCR      |= _BV(TXEN);   //wlacza nadajnik
  e6:	53 9a       	sbi	0x0a, 3	; 10
   UDR      = bufor[0];     //wysyla pierwszy znak reszta wysyla w obsludze przerwania
  e8:	80 91 a6 00 	lds	r24, 0x00A6
  ec:	8c b9       	out	0x0c, r24	; 12
  ee:	08 95       	ret

000000f0 <main>:
}

int main(void)
{
  f0:	cf ed       	ldi	r28, 0xDF	; 223
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	cd bf       	out	0x3d, r28	; 61
   DDRB = 0xff;       //wyjscie na leda   
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	87 bb       	out	0x17, r24	; 23
   UBRR = VUBRR;      //ustaw predkosc transmisji   
  fc:	83 e3       	ldi	r24, 0x33	; 51
  fe:	89 b9       	out	0x09, r24	; 9
   UCR  = 1<<RXCIE | 1<<RXEN | 1<<TXCIE;   //zezwolenie na przerwania od odb nad i zezw. na odb
 100:	80 ed       	ldi	r24, 0xD0	; 208
 102:	8a b9       	out	0x0a, r24	; 10

   sei();      //wlacz przerwania
 104:	78 94       	sei
 106:	82 e6       	ldi	r24, 0x62	; 98
 108:	e8 2e       	mov	r14, r24
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	f8 2e       	mov	r15, r24
 10e:	04 e8       	ldi	r16, 0x84	; 132
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	c3 e7       	ldi	r28, 0x73	; 115
 114:	d0 e0       	ldi	r29, 0x00	; 0

   while(1)
   {
      if(flagrx)
 116:	80 91 a4 00 	lds	r24, 0x00A4
 11a:	88 23       	and	r24, r24
 11c:	e1 f3       	breq	.-8      	; 0x116 <main+0x26>
      {
         switch(komenda)
 11e:	80 91 a5 00 	lds	r24, 0x00A5
 122:	81 33       	cpi	r24, 0x31	; 49
 124:	19 f0       	breq	.+6      	; 0x12c <main+0x3c>
 126:	82 33       	cpi	r24, 0x32	; 50
 128:	59 f4       	brne	.+22     	; 0x140 <main+0x50>
 12a:	03 c0       	rjmp	.+6      	; 0x132 <main+0x42>
         {
            case CMD_SET_PORT:
               wyslij(dane1);
 12c:	9f 2d       	mov	r25, r15
 12e:	8e 2d       	mov	r24, r14
 130:	02 c0       	rjmp	.+4      	; 0x136 <main+0x46>
//               PORTB = 0x00;
               PORTB ^= 0xFF;
               break;
            case CMD_CLEAR_PORT:
               wyslij(dane2);
 132:	8c 2f       	mov	r24, r28
 134:	9d 2f       	mov	r25, r29
 136:	c5 df       	rcall	.-118    	; 0xc2 <wyslij>
//               PORTB = 0xff;
               PORTB ^= 0xFF;
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	80 95       	com	r24
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	03 c0       	rjmp	.+6      	; 0x146 <main+0x56>
               break;
            default:
               wyslij(dane3);
 140:	91 2f       	mov	r25, r17
 142:	80 2f       	mov	r24, r16
 144:	be df       	rcall	.-132    	; 0xc2 <wyslij>
         }

         flagrx=0;   //zeruje flage odbioru zeby juz nie wchodzilo w tego if-a
 146:	10 92 a4 00 	sts	0x00A4, r1
 14a:	e5 cf       	rjmp	.-54     	; 0x116 <main+0x26>

0000014c <_exit>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <_exit>
