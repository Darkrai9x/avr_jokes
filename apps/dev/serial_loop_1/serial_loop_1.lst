
serial_loop_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000e4  000001c2  00000236  2**0
                  ALLOC
  3 .stab         00000a80  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a77  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	2b c0       	rjmp	.+86     	; 0x66 <__vector_7>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	3b c0       	rjmp	.+118    	; 0x8a <__vector_9>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_copy_data>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	ee e3       	ldi	r30, 0x3E	; 62
  26:	f1 e0       	ldi	r31, 0x01	; 1
  28:	03 c0       	rjmp	.+6      	; 0x30 <.do_copy_data_start>

0000002a <.do_copy_data_loop>:
  2a:	c8 95       	lpm
  2c:	31 96       	adiw	r30, 0x01	; 1
  2e:	0d 92       	st	X+, r0

00000030 <.do_copy_data_start>:
  30:	a4 3e       	cpi	r26, 0xE4	; 228
  32:	b1 07       	cpc	r27, r17
  34:	d1 f7       	brne	.-12     	; 0x2a <.do_copy_data_loop>

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a4 ee       	ldi	r26, 0xE4	; 228
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a9 3e       	cpi	r26, 0xE9	; 233
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <__SP_H__>
  46:	53 d0       	rcall	.+166    	; 0xee <main>
  48:	79 c0       	rjmp	.+242    	; 0x13c <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__heap_end>

0000004c <delay_ms>:
 * Wykonuje opoznienie w milisekundach
 *
 * @param unsigned int i_Miliseconds 
 */
void delay_ms(unsigned int i_Miliseconds)
{
  4c:	28 2f       	mov	r18, r24
  4e:	39 2f       	mov	r19, r25
  50:	06 c0       	rjmp	.+12     	; 0x5e <delay_ms+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  52:	80 e8       	ldi	r24, 0x80	; 128
  54:	97 e0       	ldi	r25, 0x07	; 7
  56:	01 97       	sbiw	r24, 0x01	; 1
  58:	f1 f7       	brne	.-4      	; 0x56 <delay_ms+0xa>
        // accurate and not so much compiler dependent
        // as self made code.
        while(i_Miliseconds)
        {
                _delay_ms(0.96);
                i_Miliseconds--;
  5a:	21 50       	subi	r18, 0x01	; 1
  5c:	30 40       	sbci	r19, 0x00	; 0
void delay_ms(unsigned int i_Miliseconds)
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(i_Miliseconds)
  5e:	21 15       	cp	r18, r1
  60:	31 05       	cpc	r19, r1
  62:	b9 f7       	brne	.-18     	; 0x52 <delay_ms+0x6>
  64:	08 95       	ret

00000066 <__vector_7>:
    DDR ## PORT_LETTER &= ~_BV(PIN ## PORT_LETTER ## PIN_NUMBER);   \
    PORT ## PORT_LETTER |= _BV(PIN ## PORT_LETTER ## PIN_NUMBER)

#define INPUT_CHECK(PORT_LETTER, PIN_NUMBER)			                \
    if ( bit_is_clear(PIN ## PORT_LETTER, P ## PORT_LETTER ## PIN_NUMBER) ) { 1 } else { 0 }
    
  66:	1f 92       	push	r1
  68:	0f 92       	push	r0
  6a:	0f b6       	in	r0, 0x3f	; 63
  6c:	0f 92       	push	r0
  6e:	11 24       	eor	r1, r1
  70:	8f 93       	push	r24

  72:	8c b1       	in	r24, 0x0c	; 12
  74:	80 93 e7 00 	sts	0x00E7, r24

  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	80 93 e4 00 	sts	0x00E4, r24
  7e:	8f 91       	pop	r24
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	0f 90       	pop	r0
  86:	1f 90       	pop	r1
  88:	18 95       	reti

0000008a <__vector_9>:

/*
// Wpierw konfiguruje  linię PD0 jako wejście z  wewnętrznym  podciągnięciem do VCC
DDRD  &= ~_BV(PD0);
PORTD |=  _BV(PD0);
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	8f 93       	push	r24
  96:	ef 93       	push	r30
  98:	ff 93       	push	r31


if(bit_is_clear(PIND, PD0)) {   }
  9a:	80 91 e8 00 	lds	r24, 0x00E8
  9e:	e0 91 e5 00 	lds	r30, 0x00E5
  a2:	f0 91 e6 00 	lds	r31, 0x00E6
  a6:	88 23       	and	r24, r24
  a8:	19 f0       	breq	.+6      	; 0xb0 <__vector_9+0x26>

// LUB  TAK 
  aa:	8e 2f       	mov	r24, r30
  ac:	31 96       	adiw	r30, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <__vector_9+0x28>
*/

// inicjalizacja wyjscia
#define OUTPUT_INIT(PORT_LETTER, PIN_NUMBER)			                \
    PORT ## PORT_LETTER  |= _BV(PIN ## PORT_LETTER ## PIN_NUMBER)

  b0:	81 91       	ld	r24, Z+
  b2:	f0 93 e6 00 	sts	0x00E6, r31
  b6:	e0 93 e5 00 	sts	0x00E5, r30
// ustawienie stany wysokiego na okreslonym pinie na okrelsonym porcie
#define OUTPUT_SET_1(PORT_LETTER, PIN_NUMBER)			                \
    PORT ## PORT_LETTER  |= _BV(PIN ## PORT_LETTER ## PIN_NUMBER)
  ba:	88 23       	and	r24, r24
  bc:	11 f0       	breq	.+4      	; 0xc2 <__vector_9+0x38>

// ustawienie stany niskiego na okreslonym pinie na okrelsonym porcie
  be:	8c b9       	out	0x0c, r24	; 12
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <__vector_9+0x3a>
#define OUTPUT_SET_0(PORT_LETTER, PIN_NUMBER)			                \
    PORT ## PORT_LETTER &= ~_BV(PIN ## PORT_LETTER ## PIN_NUMBER)

/*
  c2:	53 98       	cbi	0x0a, 3	; 10
  c4:	ff 91       	pop	r31
  c6:	ef 91       	pop	r30
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <czekaj>:

#define OUT_PORT__LED_RED    "B"
#define OUT__LED_RED          3
#define OUT_PORT__BUZZER     "D"
#define OUT__BUZZER           1

  d4:	bb df       	rcall	.-138    	; 0x4c <delay_ms>
  d6:	08 95       	ret

000000d8 <wysljtekstROM>:

#define OUTPUT                "OUTPUT"
#define INPPUT                "INPPUT"

#define LED_RED              OUTPUT
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	20 93 e8 00 	sts	0x00E8, r18
#define PORT__LED_RED        "B"
  de:	90 93 e6 00 	sts	0x00E6, r25
  e2:	80 93 e5 00 	sts	0x00E5, r24
#define PIN___LED_RED        (3)
  e6:	53 9a       	sbi	0x0a, 3	; 10

#define CREATE_OUTPUT(TYPEOF, PORT_LETTER, PIN_NUMBER)			            \
    if ( OUTPUT == TYPEOF )                                                 \
  e8:	53 99       	sbic	0x0a, 3	; 10
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <__stack+0x9>
  ec:	08 95       	ret

000000ee <main>:

#define OUT__LED_RED          3

//#define OUTPUT__LED_RED    DDRB", "PINB3
//#define OUTPUT__BUZZER     DDRB, PINB1

  ee:	cc ed       	ldi	r28, 0xDC	; 220
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

//using:
  f6:	1b 82       	std	Y+3, r1	; 0x03
  f8:	1a 82       	std	Y+2, r1	; 0x02
//    CREATE_OUTPUT(LED_RED, "B", 4);

  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	89 83       	std	Y+1, r24	; 0x01
        // accurate and not so much compiler dependent
        // as self made code.
        while(i_Miliseconds)
        {
                _delay_ms(0.96);
                i_Miliseconds--;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	87 bb       	out	0x17, r24	; 23
        }
 102:	88 bb       	out	0x18, r24	; 24
}


 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	81 bb       	out	0x11, r24	; 17
#endif /* !defined(__MB_AVR_SIMPLE_BOARD__H) */
 108:	82 bb       	out	0x12, r24	; 18
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	89 b9       	out	0x09, r24	; 9
 10e:	80 ed       	ldi	r24, 0xD0	; 208
 110:	8a b9       	out	0x0a, r24	; 10
 112:	78 94       	sei
 114:	90 e6       	ldi	r25, 0x60	; 96
 116:	c9 2e       	mov	r12, r25
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d9 2e       	mov	r13, r25
 11c:	8c e8       	ldi	r24, 0x8C	; 140
 11e:	e8 2e       	mov	r14, r24
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	f8 2e       	mov	r15, r24
 124:	08 eb       	ldi	r16, 0xB8	; 184
 126:	10 e0       	ldi	r17, 0x00	; 0
 128:	9d 2d       	mov	r25, r13
 12a:	8c 2d       	mov	r24, r12
 12c:	d5 df       	rcall	.-86     	; 0xd8 <wysljtekstROM>
 12e:	9f 2d       	mov	r25, r15
 130:	8e 2d       	mov	r24, r14
 132:	d2 df       	rcall	.-92     	; 0xd8 <wysljtekstROM>
 134:	91 2f       	mov	r25, r17
 136:	80 2f       	mov	r24, r16
 138:	cf df       	rcall	.-98     	; 0xd8 <wysljtekstROM>
 13a:	f6 cf       	rjmp	.-20     	; 0x128 <main+0x3a>

0000013c <_exit>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <_exit>
