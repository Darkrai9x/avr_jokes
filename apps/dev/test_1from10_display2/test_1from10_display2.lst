
test_1from10_display2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000001c0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080008c  000001ec  00000260  2**0
                  ALLOC
  3 .stab         00000d74  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a8e  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ec       	ldi	r30, 0xC0	; 192
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 38       	cpi	r26, 0x8C	; 140
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ac e8       	ldi	r26, 0x8C	; 140
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 39       	cpi	r26, 0x94	; 148
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	90 d0       	rcall	.+288    	; 0x17a <main>
  5a:	b0 c0       	rjmp	.+352    	; 0x1bc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  5e:	20 ef       	ldi	r18, 0xF0	; 240
  60:	30 e0       	ldi	r19, 0x00	; 0
  62:	04 c0       	rjmp	.+8      	; 0x6c <delay_ms+0xe>
  64:	f9 01       	movw	r30, r18
  66:	31 97       	sbiw	r30, 0x01	; 1
  68:	f1 f7       	brne	.-4      	; 0x66 <delay_ms+0x8>
    // accurate and not so much compiler dependent
    // as self made code.
    while(ms)
    {
        _delay_ms(0.96);
        ms--;
  6a:	01 97       	sbiw	r24, 0x01	; 1
void delay_ms(unsigned int ms)
{
    // we use a calibrated macro. This is more
    // accurate and not so much compiler dependent
    // as self made code.
    while(ms)
  6c:	00 97       	sbiw	r24, 0x00	; 0
  6e:	d1 f7       	brne	.-12     	; 0x64 <delay_ms+0x6>
    {
        _delay_ms(0.96);
        ms--;
    }
}
  70:	08 95       	ret

00000072 <leds_10_display_line__set_led>:

void leds_10_display_line__set_led(unsigned char led_nr)
{
    if ( 10 < led_nr )
  72:	8b 30       	cpi	r24, 0x0B	; 11
  74:	38 f5       	brcc	.+78     	; 0xc4 <leds_10_display_line__set_led+0x52>
            {1,0,0,0},
            {1,0,1,0},
            {1,0,0,1}
    };

    PORTD = bcd_1from10_7442[ led_nr ][ DISPLAY_1FROM10_BCD_INPUT_A0 ] * 8
  76:	e8 2f       	mov	r30, r24
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	ee 0f       	add	r30, r30
  7c:	ff 1f       	adc	r31, r31
  7e:	ee 0f       	add	r30, r30
  80:	ff 1f       	adc	r31, r31
  82:	df 01       	movw	r26, r30
  84:	a0 5a       	subi	r26, 0xA0	; 160
  86:	bf 4f       	sbci	r27, 0xFF	; 255
  88:	2c 91       	ld	r18, X
  8a:	33 27       	eor	r19, r19
  8c:	27 fd       	sbrc	r18, 7
  8e:	30 95       	com	r19
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	11 96       	adiw	r26, 0x01	; 1
  96:	8c 91       	ld	r24, X
  98:	11 97       	sbiw	r26, 0x01	; 1
  9a:	99 27       	eor	r25, r25
  9c:	87 fd       	sbrc	r24, 7
  9e:	90 95       	com	r25
  a0:	28 0f       	add	r18, r24
  a2:	39 1f       	adc	r19, r25
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	ee 59       	subi	r30, 0x9E	; 158
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	80 81       	ld	r24, Z
  ae:	99 27       	eor	r25, r25
  b0:	87 fd       	sbrc	r24, 7
  b2:	90 95       	com	r25
  b4:	28 0f       	add	r18, r24
  b6:	39 1f       	adc	r19, r25
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	13 96       	adiw	r26, 0x03	; 3
  be:	8c 91       	ld	r24, X
  c0:	82 0f       	add	r24, r18
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	08 95       	ret

000000c6 <leds_10_display_line__set_led_mask>:
          + bcd_1from10_7442[ led_nr ][ DISPLAY_1FROM10_BCD_INPUT_A2 ] * 2
          + bcd_1from10_7442[ led_nr ][ DISPLAY_1FROM10_BCD_INPUT_A3 ] * 1;
}

void leds_10_display_line__set_led_mask(unsigned int led_mask, unsigned int delay)
{
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	8b 01       	movw	r16, r22
//    for ( n = 0; n < delay; n++ )
//    {
        for ( n = 0; n < 10; n++ )
        {
            b *= 2;
            if  ( b & ( led_mask_shift << 1 ) )
  d0:	bc 01       	movw	r22, r24
  d2:	66 0f       	add	r22, r22
  d4:	77 1f       	adc	r23, r23
  d6:	a0 e6       	ldi	r26, 0x60	; 96
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	c0 ef       	ldi	r28, 0xF0	; 240
  e0:	d0 e0       	ldi	r29, 0x00	; 0

//    for ( n = 0; n < delay; n++ )
//    {
        for ( n = 0; n < 10; n++ )
        {
            b *= 2;
  e2:	44 0f       	add	r20, r20
  e4:	55 1f       	adc	r21, r21
            if  ( b & ( led_mask_shift << 1 ) )
  e6:	ca 01       	movw	r24, r20
  e8:	86 23       	and	r24, r22
  ea:	97 23       	and	r25, r23
  ec:	89 2b       	or	r24, r25
  ee:	39 f1       	breq	.+78     	; 0x13e <leds_10_display_line__set_led_mask+0x78>
            {1,0,0,0},
            {1,0,1,0},
            {1,0,0,1}
    };

    PORTD = bcd_1from10_7442[ led_nr ][ DISPLAY_1FROM10_BCD_INPUT_A0 ] * 8
  f0:	2c 91       	ld	r18, X
  f2:	33 27       	eor	r19, r19
  f4:	27 fd       	sbrc	r18, 7
  f6:	30 95       	com	r19
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	11 96       	adiw	r26, 0x01	; 1
  fe:	8c 91       	ld	r24, X
 100:	11 97       	sbiw	r26, 0x01	; 1
 102:	99 27       	eor	r25, r25
 104:	87 fd       	sbrc	r24, 7
 106:	90 95       	com	r25
 108:	28 0f       	add	r18, r24
 10a:	39 1f       	adc	r19, r25
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	12 96       	adiw	r26, 0x02	; 2
 112:	8c 91       	ld	r24, X
 114:	12 97       	sbiw	r26, 0x02	; 2
 116:	99 27       	eor	r25, r25
 118:	87 fd       	sbrc	r24, 7
 11a:	90 95       	com	r25
 11c:	28 0f       	add	r18, r24
 11e:	39 1f       	adc	r19, r25
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	13 96       	adiw	r26, 0x03	; 3
 126:	8c 91       	ld	r24, X
 128:	13 97       	sbiw	r26, 0x03	; 3
 12a:	82 0f       	add	r24, r18
 12c:	82 bb       	out	0x12, r24	; 18
 12e:	c8 01       	movw	r24, r16
 130:	04 c0       	rjmp	.+8      	; 0x13a <leds_10_display_line__set_led_mask+0x74>
 132:	fe 01       	movw	r30, r28
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <leds_10_display_line__set_led_mask+0x6e>
    // accurate and not so much compiler dependent
    // as self made code.
    while(ms)
    {
        _delay_ms(0.96);
        ms--;
 138:	01 97       	sbiw	r24, 0x01	; 1
void delay_ms(unsigned int ms)
{
    // we use a calibrated macro. This is more
    // accurate and not so much compiler dependent
    // as self made code.
    while(ms)
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	d1 f7       	brne	.-12     	; 0x132 <leds_10_display_line__set_led_mask+0x6c>
 13e:	14 96       	adiw	r26, 0x04	; 4
    unsigned int led_mask_shift = led_mask;
    unsigned int b = 1;

//    for ( n = 0; n < delay; n++ )
//    {
        for ( n = 0; n < 10; n++ )
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	a8 38       	cpi	r26, 0x88	; 136
 144:	b8 07       	cpc	r27, r24
 146:	69 f6       	brne	.-102    	; 0xe2 <leds_10_display_line__set_led_mask+0x1c>
                delay_ms(delay);
//                delay_ms(1);
            }
        }
//    }
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <system_init>:

void system_init()
{
    DDRD = 0xFF;
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	81 bb       	out	0x11, r24	; 17
    PORTD = 0;
 156:	12 ba       	out	0x12, r1	; 18
}
 158:	08 95       	ret

0000015a <controller_init>:

void controller_init(tController *pcontroller)
{
 15a:	fc 01       	movw	r30, r24
//    unsigned int ch = 513 + 4 + 32;
// nieswieci jedna - reszta swieci
// swieca wszystkie oprucz jednego
    unsigned int ch = 1023 - 64;

    pcontroller->currentSelectedMode = MODE_CONTROLL;
 15c:	11 82       	std	Z+1, r1	; 0x01
 15e:	10 82       	st	Z, r1
    pcontroller->currentTempValue = 25;
 160:	89 e1       	ldi	r24, 0x19	; 25
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	93 83       	std	Z+3, r25	; 0x03
 166:	82 83       	std	Z+2, r24	; 0x02
    pcontroller->tempDisplayValue = ch;
 168:	8f eb       	ldi	r24, 0xBF	; 191
 16a:	93 e0       	ldi	r25, 0x03	; 3
 16c:	95 83       	std	Z+5, r25	; 0x05
 16e:	84 83       	std	Z+4, r24	; 0x04
    pcontroller->lowTempFanSpeedValue = 9;
 170:	89 e0       	ldi	r24, 0x09	; 9
 172:	86 83       	std	Z+6, r24	; 0x06
    pcontroller->highTempFanSpeedValue = 1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	87 83       	std	Z+7, r24	; 0x07
}
 178:	08 95       	ret

0000017a <main>:
//    }
}

void system_init()
{
    DDRD = 0xFF;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	81 bb       	out	0x11, r24	; 17
    PORTD = 0;
 17e:	12 ba       	out	0x12, r1	; 18
//    unsigned int ch = 513 + 4 + 32;
// nieswieci jedna - reszta swieci
// swieca wszystkie oprucz jednego
    unsigned int ch = 1023 - 64;

    pcontroller->currentSelectedMode = MODE_CONTROLL;
 180:	10 92 8d 00 	sts	0x008D, r1
 184:	10 92 8c 00 	sts	0x008C, r1
    pcontroller->currentTempValue = 25;
 188:	89 e1       	ldi	r24, 0x19	; 25
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 8f 00 	sts	0x008F, r25
 190:	80 93 8e 00 	sts	0x008E, r24
    pcontroller->tempDisplayValue = ch;
 194:	8f eb       	ldi	r24, 0xBF	; 191
 196:	93 e0       	ldi	r25, 0x03	; 3
 198:	90 93 91 00 	sts	0x0091, r25
 19c:	80 93 90 00 	sts	0x0090, r24
    pcontroller->lowTempFanSpeedValue = 9;
 1a0:	89 e0       	ldi	r24, 0x09	; 9
 1a2:	80 93 92 00 	sts	0x0092, r24
    pcontroller->highTempFanSpeedValue = 1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 93 00 	sts	0x0093, r24

    controller_init(&controller);

    while ( 1 )
    {
        leds_10_display_line__set_led_mask(controller.tempDisplayValue, 1);
 1ac:	80 91 90 00 	lds	r24, 0x0090
 1b0:	90 91 91 00 	lds	r25, 0x0091
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	86 df       	rcall	.-244    	; 0xc6 <leds_10_display_line__set_led_mask>
 1ba:	f8 cf       	rjmp	.-16     	; 0x1ac <main+0x32>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
